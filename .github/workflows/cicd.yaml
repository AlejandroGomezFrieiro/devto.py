name: "CICD"
on:
  pull_request:
  push:
    branches:
      - main
jobs:
  publish:

    name: "Publish to Pypi"
    runs-on: "ubuntu-latest"
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [test, lint]
    steps:
      # Note: we need to checkout the repository at the workflow sha in case during the workflow
      # the branch was updated. To keep PSR working with the configured release branches,
      # we force a checkout of the desired release branch but at the workflow sha HEAD.
      - name: Setup | Checkout Repository at workflow sha
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.sha }}

      - name: Setup | Force correct release branch on workflow sha
        run: |
          git checkout -B ${{ github.ref_name }} ${{ github.sha }}
      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"

      - name: Action | Semantic Version Release
        id: release
        # Adjust tag with desired version if applicable.
        uses: python-semantic-release/python-semantic-release@v9.12.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          git_committer_name: "github-actions"
          git_committer_email: "actions@users.noreply.github.com"
      #
      # - name: Publish | Upload package to PyPI
      #   uses: pypa/gh-action-pypi-publish@v1
      #   if: steps.release.outputs.released == 'true'
      #
      # - name: Publish | Upload to GitHub Release Assets
      #   uses: python-semantic-release/publish-action@v9.8.9
      #   if: steps.release.outputs.released == 'true'
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     tag: ${{ steps.release.outputs.tag }}
    # steps:
    # - uses: actions/checkout@v4
    # - uses: cachix/install-nix-action@v26
    # - uses: cachix/cachix-action@v14
    #   with:
    #     name: devenv
    # - name: Develop shell
    #   uses: nicknovitski/nix-develop@v1
    #   with:
    #     arguments: --no-pure-eval
    # - name: Sync shell
    #   run: |
    #         uv sync
    #         uv run semantic-release --noop publish
    # - name: Prepare package for release
    #   env:
    #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   run: |
    #         git config user.name github-actions
    #         git config user.email github-actions@github.com
    #         uv run semantic-release publish
    # - name: Publish to TestPyPI
    #   uses: pypa/gh-action-pypi-publish@release/v1
    #   with:
    #     user: __token__
    #     password: ${{ secrets.TEST_PYPI_API_TOKEN }}
    #     repository_url: https://test.pypi.org/legacy/


  test:
    strategy:
      matrix:
        os: [ubuntu-latest] #, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - uses: cachix/install-nix-action@v26
    - uses: cachix/cachix-action@v14
      with:
        name: devenv
    - name: Develop shell
      uses: nicknovitski/nix-develop@v1
      with:
        arguments: --no-pure-eval
    - name: Sync shell
      run: uv sync
    - name: Run tests
      run: pytest
  lint:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - uses: cachix/install-nix-action@v26
    - uses: cachix/cachix-action@v14
      with:
        name: devenv
    - name: Develop shell
      uses: nicknovitski/nix-develop@v1
      with:
        arguments: --no-pure-eval
    - name: Sync shell
      run: uv sync
    - name: Run linting
      run: ruff check
