name: "CICD"
on:
  pull_request:
  push:
    branches:
      - main
jobs:
  test_publish:
    name: "Test publishing"
    runs-on: "ubuntu-latest"
    needs: [test, lint]
    environment:
      name: testpypi
      url: https://test.pypi.org/p/devto
    permissions:
      id-token: write
      contents: write
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Install uv
      run: pipx install uv
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
    - name: Install dependencies
      run: uv sync
    - name: Prepare package for release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        uv build
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Publish distribution ðŸ“¦ to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
    
  publish:
    name: "Publish to Pypi"
    runs-on: "ubuntu-latest"
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [test, lint]
    permissions:
      id-token: write
      contents: write
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Install uv
      run: pipx install uv
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
    - name: Install dependencies
      run: uv sync
    - name: Prepare package for release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        uv run semantic-release publish
    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository_url: https://test.pypi.org/legacy/
      # - name: Setup | Checkout Repository at workflow sha
      #   uses: actions/checkout@v4
      #   with:
      #     fetch-depth: 0
      #     ref: ${{ github.sha }}
      #
      # - name: Setup | Force correct release branch on workflow sha
      #   run: |
      #     git checkout -B ${{ github.ref_name }} ${{ github.sha }}
      #
      # - name: Action | Semantic Version Release
      #   id: release
      #   # Adjust tag with desired version if applicable.
      #   uses: python-semantic-release/python-semantic-release@v9.12.0
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     git_committer_name: "github-actions"
      #     git_committer_email: "actions@users.noreply.github.com"
      #
      # - name: Publish | Upload package to PyPI
      #   uses: pypa/gh-action-pypi-publish@v1.12.3
      #   if: steps.release.outputs.released == 'true'
      #
      # - name: Publish | Upload to GitHub Release Assets
      #   uses: python-semantic-release/publish-action@v9.8.9
      #   if: steps.release.outputs.released == 'true'
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     tag: ${{ steps.release.outputs.tag }}


  test:
    strategy:
      matrix:
        os: [ubuntu-latest] #, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - uses: cachix/install-nix-action@v26
    - uses: cachix/cachix-action@v14
      with:
        name: devenv
    - name: Develop shell
      uses: nicknovitski/nix-develop@v1
      with:
        arguments: --no-pure-eval
    - name: Sync shell
      run: uv sync
    - name: Run tests
      run: pytest
  lint:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - uses: cachix/install-nix-action@v26
    - uses: cachix/cachix-action@v14
      with:
        name: devenv
    - name: Develop shell
      uses: nicknovitski/nix-develop@v1
      with:
        arguments: --no-pure-eval
    - name: Sync shell
      run: uv sync
    - name: Run linting
      run: ruff check
